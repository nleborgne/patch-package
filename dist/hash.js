"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashFile = void 0;
const crypto_1 = require("crypto");
const fs_1 = require("fs");
const bufferSize = 1024;
const buffer = Buffer.alloc(bufferSize);
function hashFile(filePath) {
    const sha = crypto_1.createHash("sha256");
    const fileDescriptor = fs_1.openSync(filePath, "r");
    const size = fs_1.statSync(filePath).size;
    let totalBytesRead = 0;
    while (totalBytesRead < size) {
        const bytesRead = fs_1.readSync(fileDescriptor, buffer, 0, Math.min(size - totalBytesRead, bufferSize), totalBytesRead);
        if (bytesRead < bufferSize) {
            sha.update(buffer.slice(0, bytesRead));
        }
        else {
            sha.update(buffer);
        }
        totalBytesRead += bytesRead;
    }
    fs_1.closeSync(fileDescriptor);
    return sha.digest("hex");
}
exports.hashFile = hashFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQywyQkFBNEQ7QUFFNUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFBO0FBRXZCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7QUFFdkMsU0FBZ0IsUUFBUSxDQUFDLFFBQWdCO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLG1CQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDaEMsTUFBTSxjQUFjLEdBQUcsYUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUM5QyxNQUFNLElBQUksR0FBRyxhQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFBO0lBQ3BDLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQTtJQUN0QixPQUFPLGNBQWMsR0FBRyxJQUFJLEVBQUU7UUFDNUIsTUFBTSxTQUFTLEdBQUcsYUFBUSxDQUN4QixjQUFjLEVBQ2QsTUFBTSxFQUNOLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxjQUFjLEVBQUUsVUFBVSxDQUFDLEVBQzNDLGNBQWMsQ0FDZixDQUFBO1FBQ0QsSUFBSSxTQUFTLEdBQUcsVUFBVSxFQUFFO1lBQzFCLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQTtTQUN2QzthQUFNO1lBQ0wsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUNuQjtRQUNELGNBQWMsSUFBSSxTQUFTLENBQUE7S0FDNUI7SUFDRCxjQUFTLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDekIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzFCLENBQUM7QUF0QkQsNEJBc0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gXCJjcnlwdG9cIlxyXG5pbXBvcnQgeyBvcGVuU3luYywgcmVhZFN5bmMsIGNsb3NlU3luYywgc3RhdFN5bmMgfSBmcm9tIFwiZnNcIlxyXG5cclxuY29uc3QgYnVmZmVyU2l6ZSA9IDEwMjRcclxuXHJcbmNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhidWZmZXJTaXplKVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc2hGaWxlKGZpbGVQYXRoOiBzdHJpbmcpIHtcclxuICBjb25zdCBzaGEgPSBjcmVhdGVIYXNoKFwic2hhMjU2XCIpXHJcbiAgY29uc3QgZmlsZURlc2NyaXB0b3IgPSBvcGVuU3luYyhmaWxlUGF0aCwgXCJyXCIpXHJcbiAgY29uc3Qgc2l6ZSA9IHN0YXRTeW5jKGZpbGVQYXRoKS5zaXplXHJcbiAgbGV0IHRvdGFsQnl0ZXNSZWFkID0gMFxyXG4gIHdoaWxlICh0b3RhbEJ5dGVzUmVhZCA8IHNpemUpIHtcclxuICAgIGNvbnN0IGJ5dGVzUmVhZCA9IHJlYWRTeW5jKFxyXG4gICAgICBmaWxlRGVzY3JpcHRvcixcclxuICAgICAgYnVmZmVyLFxyXG4gICAgICAwLFxyXG4gICAgICBNYXRoLm1pbihzaXplIC0gdG90YWxCeXRlc1JlYWQsIGJ1ZmZlclNpemUpLFxyXG4gICAgICB0b3RhbEJ5dGVzUmVhZCxcclxuICAgIClcclxuICAgIGlmIChieXRlc1JlYWQgPCBidWZmZXJTaXplKSB7XHJcbiAgICAgIHNoYS51cGRhdGUoYnVmZmVyLnNsaWNlKDAsIGJ5dGVzUmVhZCkpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzaGEudXBkYXRlKGJ1ZmZlcilcclxuICAgIH1cclxuICAgIHRvdGFsQnl0ZXNSZWFkICs9IGJ5dGVzUmVhZFxyXG4gIH1cclxuICBjbG9zZVN5bmMoZmlsZURlc2NyaXB0b3IpXHJcbiAgcmV0dXJuIHNoYS5kaWdlc3QoXCJoZXhcIilcclxufVxyXG4iXX0=